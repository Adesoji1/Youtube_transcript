hi everybody my name is Jim Clark uh I (start: 6.798, duration: 5.719)
am a member of Docker Labs we are (start: 9.119, duration: 6.960)
working on Innovation at at Docker um (start: 12.519, duration: 5.519)
You probably saw some of our some of our (start: 16.079, duration: 4.000)
talks today we&#39;ve been working on AIML (start: 18.038, duration: 4.801)
dock debug I&#39;ve been doing some research (start: 20.079, duration: 6.639)
over the past six months I guess on ncks (start: 22.840, duration: 6.800)
and I have to say besides llms which (start: 26.719, duration: 4.840)
have been like an exciting and big part (start: 29.639, duration: 4.238)
of our uh of our of our work for the (start: 31.559, duration: 4.400)
last for the last while NY has actually (start: 33.879, duration: 5.000)
had a really big influence on the way (start: 35.959, duration: 4.118)
I&#39;ve been working maybe one of the (start: 38.879, duration: 3.321)
bigger influences uh over the over the (start: 40.078, duration: 3.921)
last year so I&#39;m kind of excited to look (start: 42.200, duration: 4.079)
out and get an opportunity to see people (start: 44.000, duration: 4.559)
who are either using nxs today or (start: 46.279, duration: 5.400)
hopefully we&#39;ll be using uh nxs tomorrow (start: 48.558, duration: 5.639)
so I&#39;m excited I&#39;m I&#39;m a Nick&#39;s (start: 51.680, duration: 5.320)
Enthusiast but relatively new just just (start: 54.199, duration: 4.921)
been using it in the last year so I&#39;m (start: 57.000, duration: 4.840)
I&#39;m excited to have Tom uh he is maybe (start: 59.119, duration: 4.399)
not a NYX Enthusiast what would you call (start: 61.840, duration: 3.678)
yourself uh I think I&#39;m more in the (start: 63.519, duration: 3.960)
category of nxs fanatic at this point (start: 65.518, duration: 4.239)
there&#39;s no going back um but yeah my (start: 67.478, duration: 4.520)
name is Tom bney um director of Labs at (start: 69.759, duration: 3.960)
flocks where we&#39;re trying to kind of (start: 72.000, duration: 3.519)
figure out what this set of superpowers (start: 73.720, duration: 3.078)
are and how do we bring them to the (start: 75.519, duration: 3.638)
world how do we figure out how to expose (start: 76.799, duration: 5.201)
them present them in a usable way and uh (start: 79.158, duration: 5.761)
that&#39;s really our uh Mission so I think (start: 82.000, duration: 4.679)
uh let&#39;s get (start: 84.919, duration: 3.559)
started okay (start: 86.680, duration: 4.360)
agenda um I think it&#39;s going to be (start: 88.478, duration: 5.480)
easiest to talk about where we are today (start: 91.040, duration: 4.000)
because we&#39;re going to talk about (start: 93.959, duration: 4.239)
content today and so we build content (start: 95.040, duration: 5.960)
for Docker using Docker images Docker (start: 98.199, duration: 7.039)
files these are great I obviously um (start: 101.000, duration: 6.078)
I&#39;ll I&#39;ll speak from the docker file and (start: 105.239, duration: 4.559)
Docker perspective in this talk um they (start: 107.079, duration: 4.881)
do we we&#39;re going to admit some (start: 109.799, duration: 4.841)
limitations to them and I I I hopefully (start: 111.959, duration: 6.719)
will you&#39;ll you&#39;ll see in our examples (start: 114.639, duration: 6.039)
how you over overcome some of these (start: 118.680, duration: 4.000)
limitations today I want to kind of (start: 120.680, duration: 4.199)
impress upon you the idea that NYX is (start: 122.680, duration: 4.718)
another option that we have here this (start: 124.879, duration: 4.960)
adopting a declarative approach and how (start: 127.399, duration: 4.840)
we can use Docker and Nyx together is (start: 129.839, duration: 3.920)
the thing that we really want to (start: 132.238, duration: 3.121)
everybody to get out of this out of this (start: 133.759, duration: 3.759)
talk today and at the end we&#39;ve got a (start: 135.360, duration: 4.158)
little bit of a call to action because (start: 137.518, duration: 3.200)
there are some actually really (start: 139.518, duration: 3.280)
interesting opportunities that we have (start: 140.720, duration: 4.320)
to bring a new way of using both Docker (start: 142.800, duration: 4.078)
and Nyx together and we&#39;re kind of like (start: 145.039, duration: 3.359)
interested in what whether whether (start: 146.878, duration: 3.520)
people want to join us on that (start: 148.399, duration: 3.720)
yep so the the point here is to kind of (start: 150.399, duration: 3.519)
get some interest and also then take (start: 152.119, duration: 3.198)
that interest or momentum and go to the (start: 153.919, duration: 2.839)
next (start: 155.319, duration: 3.640)
steps okay so let&#39;s start with Docker (start: 156.759, duration: 5.920)
files that&#39;s where we are today and uh (start: 158.958, duration: 6.040)
that the the picture that you&#39;ll all be (start: 162.679, duration: 4.839)
familiar with here (start: 165.000, duration: 6.598)
is our mental model of how we build (start: 167.518, duration: 6.881)
content in images so we have Docker (start: 171.598, duration: 5.761)
files Docker files produce layers that (start: 174.399, duration: 4.800)
relationship between an instruction and (start: 177.360, duration: 4.480)
a layer is is one to one we all think (start: 179.199, duration: 5.079)
about this as a stack you start you (start: 181.839, duration: 4.959)
start with your operating system you (start: 184.279, duration: 4.840)
start to you do things at the end of (start: 186.798, duration: 4.519)
doing something you take a snapshot and (start: 189.119, duration: 4.360)
you keep you keep building these layers (start: 191.319, duration: 4.280)
one by one until you&#39;ve you&#39;ve got your (start: 193.479, duration: 4.599)
entire image so I kind of want to set (start: 195.598, duration: 4.401)
this ground this ground work because (start: 198.080, duration: 3.119)
this is where we&#39;re start this is where (start: 200.000, duration: 3.000)
we are right now and we&#39;re going to (start: 201.199, duration: 4.039)
start to kind of like look at how we (start: 203.000, duration: 4.360)
might change that to get a few (start: 205.238, duration: 4.960)
improvements to our to our workflow yeah (start: 207.360, duration: 4.879)
it&#39;s important to note that this model (start: 210.199, duration: 4.639)
it works it&#39;s simple it gives you a good (start: 212.238, duration: 4.401)
mental model that mental model is is (start: 214.839, duration: 4.000)
actually somewhat accurate and that (start: 216.639, duration: 4.280)
means that it doesn&#39;t leak or cause (start: 218.839, duration: 3.799)
problems very often but there are some (start: 220.919, duration: 5.519)
limitations so let&#39;s talk about some of (start: 222.639, duration: 8.519)
those right so um I I&#39;m not going to (start: 226.438, duration: 6.921)
talk about like why we like Docker files (start: 231.158, duration: 3.561)
we all like Docker files it&#39;s a great (start: 233.360, duration: 3.598)
way of getting getting our content into (start: 234.720, duration: 6.238)
into into our images um (start: 236.958, duration: 6.080)
what what I&#39;ll talk a little bit about (start: 240.958, duration: 6.600)
is how do we share them and when you&#39;re (start: 243.039, duration: 6.880)
when you&#39;re thinking about the a Docker (start: 247.559, duration: 4.318)
file that you&#39;ve made and is working (start: 249.919, duration: 4.480)
great how do you how do you treat that (start: 251.878, duration: 4.880)
like a like something like a library (start: 254.399, duration: 4.078)
that you get to share with other people (start: 256.759, duration: 4.560)
how do you manage or or maybe I&#39;ll ask (start: 258.479, duration: 4.881)
it this way have you ever had the (start: 261.320, duration: 3.640)
experience where you kind of know that (start: 263.359, duration: 4.199)
you&#39;ve maybe put a little bit too much (start: 264.959, duration: 5.599)
into into one of your Docker images (start: 267.559, duration: 7.719)
um best practices the you the first (start: 270.559, duration: 6.880)
Docker file you write doesn&#39;t look a lot (start: 275.279, duration: 4.119)
like the last Docker file you write (start: 277.440, duration: 4.758)
there is a journey there and those best (start: 279.399, duration: 4.920)
practices when we when we learn them I (start: 282.199, duration: 4.440)
mean our images get better we have an (start: 284.320, duration: 4.280)
understanding of where you start where (start: 286.639, duration: 4.160)
you end how do we encapsulate those best (start: 288.600, duration: 6.239)
practices and finally um supply chain (start: 290.799, duration: 6.360)
considerations yeah this a topic that&#39;s (start: 294.839, duration: 3.759)
coming up more and more often there&#39;s (start: 297.160, duration: 3.200)
more interest in Supply fly chain and Es (start: 298.600, duration: 3.400)
bombs and how do we do and how do we (start: 300.359, duration: 3.079)
handle these things in a disciplined (start: 302.000, duration: 3.240)
manner how do we address all of these (start: 303.440, duration: 3.759)
things and that&#39;s pretty much the rest (start: 305.239, duration: 3.839)
of the talk is going to be (start: 307.199, duration: 4.080)
about I don&#39;t know if bloat is the right (start: 309.079, duration: 4.599)
word bloat is yeah bloat is a good is a (start: 311.279, duration: 6.119)
is a good word here um so everyone has (start: 313.679, duration: 6.039)
the experience (start: 317.399, duration: 5.238)
of where how the content that you put in (start: 319.720, duration: 4.840)
your Docker image is maybe not the (start: 322.639, duration: 4.080)
content that you actually need to run (start: 324.559, duration: 3.880)
and sometimes that&#39;s because you need a (start: 326.720, duration: 3.960)
lot of tools to build and you don&#39;t need (start: 328.440, duration: 4.280)
those tools when you run but it&#39;s also (start: 330.679, duration: 3.799)
another thing there&#39;s a phenomenon of (start: 332.720, duration: 4.000)
the easiest thing to do is just to get (start: 334.479, duration: 3.801)
everything I mean it&#39;s a little bit like (start: 336.720, duration: 3.079)
when you&#39;re packing for a holiday the (start: 338.279, duration: 2.839)
easiest thing to do is just throw (start: 339.799, duration: 3.799)
everything in your suitcase but there is (start: 341.119, duration: 5.239)
actually a price to pay for that and um (start: 343.600, duration: 4.199)
on a plane it might be that it just (start: 346.359, duration: 4.800)
doesn&#39;t fit but in the in the world of (start: 347.799, duration: 6.920)
like content there&#39;s also the problem of (start: 351.160, duration: 5.519)
there&#39;s a bit of a tax if you&#39;ve got (start: 354.720, duration: 4.440)
content in that that you don&#39;t need and (start: 356.679, duration: 4.078)
let&#39;s just say that some of that content (start: 359.160, duration: 3.440)
becomes vulnerable you might have work (start: 360.759, duration: 5.401)
to do and so there isn&#39;t it it the the (start: 362.600, duration: 6.079)
ability to kind of like obsess a little (start: 366.160, duration: 5.758)
bit over only having the smallest amount (start: 368.679, duration: 5.238)
of content that you need sometimes that (start: 371.919, duration: 5.480)
Obsession provides is that&#39;s work for us (start: 373.919, duration: 5.241)
and what we&#39;re going to talk about today (start: 377.399, duration: 3.839)
is a way that you can kind of build up (start: 379.160, duration: 4.400)
to only having the content you need (start: 381.239, duration: 6.959)
easily so the key the key word here is (start: 383.559, duration: 4.638)
easily and that might make you think (start: 388.399, duration: 4.798)
about multi-stage builds is that not the (start: 391.279, duration: 4.519)
problem it solves and in some sense uh (start: 393.199, duration: 6.160)
it might I yeah it is right I mean (start: 395.799, duration: 5.480)
multi-stage builds are a great way of of (start: 399.359, duration: 4.519)
handling this you you&#39;ve you&#39;ve got one (start: 401.279, duration: 4.318)
stage to build up your build graph this (start: 403.880, duration: 3.438)
is everything that you need in order to (start: 405.598, duration: 4.320)
build your content and then what do you (start: 407.319, duration: 6.480)
do you copy out the minimal amount that (start: 409.919, duration: 7.321)
you need into into your runtime and that (start: 413.799, duration: 5.678)
sentence copy out the minimal amount (start: 417.239, duration: 4.798)
that you need how do you do that like (start: 419.479, duration: 4.719)
what does that even mean to go to to (start: 422.039, duration: 4.361)
take the content that you need from your (start: 424.199, duration: 5.040)
build and move it you have to understand (start: 426.399, duration: 5.798)
how to do that that is that that itself (start: 429.239, duration: 4.920)
is a kind of a piece of knowledge that (start: 432.199, duration: 3.960)
you need yeah this this requires (start: 434.160, duration: 3.559)
expertise you need to know what you need (start: 436.160, duration: 3.799)
to pull out of it uh sometimes if you (start: 437.720, duration: 4.079)
have a larger and more complex project (start: 439.959, duration: 3.200)
you&#39;re going to have Dynamic libraries (start: 441.799, duration: 2.720)
you&#39;re going to have things loaded only (start: 443.160, duration: 2.719)
at runtime you&#39;re going to have (start: 444.519, duration: 2.959)
scripting languages for which this is a (start: 445.878, duration: 3.720)
very non-trivial problem right right if (start: 447.479, duration: 4.000)
you can static build everything right (start: 449.598, duration: 3.841)
It&#39;s relatively simple but as soon as (start: 451.479, duration: 3.960)
you start having a more complex piece of (start: 453.440, duration: 4.039)
software uh now you don&#39;t know did I (start: 455.440, duration: 4.598)
grab too much did I grab too little uh (start: 457.479, duration: 4.040)
are the errors I&#39;m going to run into (start: 460.039, duration: 3.000)
only going to show up in production (start: 461.519, duration: 3.039)
because those code pads only show up (start: 463.039, duration: 3.279)
there and I don&#39;t have a way to verify (start: 464.559, duration: 4.318)
did I get everything I needed and (start: 466.319, duration: 4.040)
sometimes fixing this is easy sometimes (start: 468.878, duration: 3.361)
it&#39;s hard but it always if you tend to (start: 470.359, duration: 3.720)
try to like hope for the best it always (start: 472.239, duration: 3.200)
tends to bite you and it tends to bite (start: 474.079, duration: 3.398)
you at the worst possible moment so how (start: 475.440, duration: 3.438)
do we make it so that we actually know (start: 477.479, duration: 3.119)
UPF front whether or not we have (start: 478.878, duration: 3.440)
everything that we (start: 480.598, duration: 4.841)
need so for for modularity the way I (start: 482.319, duration: 6.280)
like to think about it is as developers (start: 485.440, duration: 5.039)
how do we approach (start: 488.598, duration: 3.760)
modularity when you have something that (start: 490.479, duration: 4.719)
you want to reuse you put it in a (start: 492.359, duration: 5.599)
library you package it up you give (start: 495.199, duration: 4.400)
people the git coordinate for it and you (start: 497.959, duration: 2.759)
share (start: 499.598, duration: 4.640)
it and in some ways when we&#39;ve figured (start: 500.720, duration: 7.158)
out how to do uh to to package our our (start: 504.239, duration: 6.359)
image why don&#39;t we use aim SAR sort of (start: 507.878, duration: 5.241)
technique and so one of one of the (start: 510.598, duration: 3.880)
things that we&#39;re going to try to (start: 513.119, duration: 3.039)
impress upon you today is that we (start: 514.479, duration: 4.039)
actually can do something very similar (start: 516.158, duration: 4.960)
in this sphere yeah and this is just (start: 518.518, duration: 4.160)
kind of an example of showing that I (start: 521.119, duration: 3.279)
want to bring in wisdom from two (start: 522.679, duration: 3.519)
different sources maybe it&#39;s a best (start: 524.398, duration: 3.841)
practice maybe it&#39;s a company policy (start: 526.200, duration: 3.680)
maybe it&#39;s how my particular language (start: 528.239, duration: 3.519)
ecosystem is supposed to work but I want (start: 529.880, duration: 3.480)
to bring those in and use all those (start: 531.760, duration: 3.920)
pieces of wisdom at once but notice how (start: 533.359, duration: 3.680)
this kind of looks like there&#39;s kind of (start: 535.679, duration: 3.359)
two things that I need to inherit from (start: 537.039, duration: 4.320)
right right not one it starts to look (start: 539.039, duration: 4.798)
not like that stack or that list that we (start: 541.359, duration: 4.519)
looked at before but it starts to look (start: 543.838, duration: 3.881)
more like using libraries it starts to (start: 545.880, duration: 3.638)
look like the sort of read use and (start: 547.719, duration: 3.519)
modularity that developers are often (start: 549.518, duration: 4.480)
familiar with so but how do we do this (start: 551.239, duration: 4.119)
how do we do this in in a structured (start: 554.000, duration: 2.880)
manner how do we do this again in a way (start: 555.359, duration: 3.479)
that uh imposes like the correct (start: 556.880, duration: 4.679)
controls that we (start: 558.838, duration: 2.720)
want so this is this is a slide I like (start: 561.838, duration: 5.080)
um maybe it&#39;s a little bit too abstract (start: 564.719, duration: 5.519)
but I like to think about what is Docker (start: 566.919, duration: 8.038)
build um what is the the docker file (start: 570.239, duration: 7.598)
it&#39;s a way for us it&#39;s it&#39;s it&#39;s a (start: 574.958, duration: 4.880)
function that we can run where the (start: 577.838, duration: 3.240)
output (start: 579.838, duration: 6.440)
is the output are layers of content and (start: 581.078, duration: 7.880)
what are the inputs to that function so (start: 586.278, duration: 4.841)
if you squint at a at a Docker file you (start: 588.958, duration: 5.361)
realize okay it this this defines my (start: 591.119, duration: 6.440)
function the inputs are things like from (start: 594.320, duration: 5.360)
lines what content (start: 597.559, duration: 5.559)
where where am I starting with um (start: 599.679, duration: 5.158)
statements like copies when I want to (start: 603.119, duration: 4.440)
copy something from a multi-stage build (start: 604.838, duration: 6.600)
or in the or just a run line where I (start: 607.559, duration: 5.480)
might you know grab some content from (start: 611.440, duration: 4.880)
the internet where I guess the uh input (start: 613.039, duration: 7.119)
to my function is uh the internet so (start: 616.320, duration: 6.880)
learning how the how we can control (start: 620.159, duration: 5.880)
those inputs so that we can consistent (start: 623.200, duration: 4.960)
so that we have consistent verifiable (start: 626.039, duration: 4.440)
outputs that&#39;s one of the that&#39;s one of (start: 628.159, duration: 4.079)
the big things that we&#39;re going to be uh (start: 630.479, duration: 4.199)
addressing in the next section yeah when (start: 632.239, duration: 4.000)
you contact the internet right anything (start: 634.679, duration: 3.880)
can happen and it also means that now (start: 636.239, duration: 4.239)
like all your efforts to try to control (start: 638.559, duration: 4.440)
what went into your software goes a (start: 640.479, duration: 4.199)
little bit Haywire right what did you (start: 643.000, duration: 3.638)
just put into your software it could be (start: 644.679, duration: 3.119)
something that you need something that (start: 646.638, duration: 2.161)
you don&#39;t need it might have been (start: 647.799, duration: 2.759)
changed along the way right how do you (start: 648.799, duration: 4.199)
verify this right so every time you go (start: 650.559, duration: 5.199)
do this uncontrolled access either to a (start: 653.000, duration: 4.638)
build context or to the internet or just (start: 655.760, duration: 4.159)
do something that kind of breaks out and (start: 657.638, duration: 3.720)
tries to pull these things in it&#39;s very (start: 659.919, duration: 4.440)
pragmatic right it&#39;s very useful but now (start: 661.359, duration: 4.239)
we&#39;ve kind of thrown a lot of the (start: 664.359, duration: 2.839)
control and the repeatability right (start: 665.599, duration: 2.918)
there&#39;s all these kind of words we keep (start: 667.200, duration: 3.319)
using about how do I go back in time how (start: 668.518, duration: 4.201)
do I debug how do I figure out whether (start: 670.518, duration: 3.559)
or not okay it worked for you but not (start: 672.719, duration: 3.239)
worked for me like we end up with this (start: 674.078, duration: 3.641)
problem of works on my machine and not (start: 675.958, duration: 4.281)
yours even in the context of containers (start: 677.719, duration: 4.960)
as I try to build the one that you did (start: 680.239, duration: 6.440)
so we have a we have a problem to solve (start: 682.679, duration: 4.000)
here so for me this is one of the things (start: 687.958, duration: 6.040)
that really made NYX kind of an an (start: 690.919, duration: 5.800)
important part of my my tool chain (start: 694.000, duration: 5.559)
because for a c i I&#39;ve I know enough (start: 696.719, duration: 5.280)
about Docker files that I can be very (start: 699.559, duration: 4.360)
confident that I&#39;m keeping my CI and my (start: 702.000, duration: 4.399)
production environments in (start: 703.919, duration: 4.519)
sync but there was a point where I (start: 706.398, duration: 4.559)
started to realize that my development (start: 708.440, duration: 4.599)
environments I wasn&#39;t really even trying (start: 710.958, duration: 4.640)
to keep them in sync with my my CI and (start: 713.039, duration: 4.280)
production environments that that moment (start: 715.599, duration: 3.960)
when I ask everyone on the team hey (start: 717.320, duration: 4.360)
we&#39;re we&#39;re we&#39;re deploying this version (start: 719.559, duration: 4.959)
we&#39;re using this version of npm what (start: 721.679, duration: 4.519)
what what are people on in their local (start: 724.518, duration: 3.280)
environments and you know people list a (start: 726.200, duration: 3.319)
whole bunch of it&#39;s just entropy like (start: 727.799, duration: 3.680)
there&#39;s nothing if there&#39;s nothing if (start: 729.518, duration: 3.520)
there&#39;s no common definition that&#39;s (start: 731.479, duration: 4.039)
keeping those in sync then they have a (start: 733.039, duration: 5.880)
tendency to to get out of sync and this (start: 735.518, duration: 5.640)
is this was really interesting that I (start: 738.919, duration: 4.598)
was able to like start looking at a (start: 741.159, duration: 4.440)
development environment and end up using (start: 743.518, duration: 6.160)
that same definition to drive my uh (start: 745.599, duration: 6.199)
environment I mean what we want here is (start: 749.679, duration: 4.000)
we want all these things to like operate (start: 751.799, duration: 3.759)
in the same way in the same predictable (start: 753.679, duration: 4.278)
Manner and how do we do so well how (start: 755.559, duration: 4.159)
about we try to set a standard like Hey (start: 757.958, duration: 3.559)
try to run the same bits everywhere (start: 759.719, duration: 2.960)
that&#39;s a good way at least to get (start: 761.518, duration: 2.440)
started maybe you know some (start: 762.679, duration: 3.319)
configuration might be different but (start: 763.958, duration: 4.361)
let&#39;s just run the same stuff and have a (start: 766.000, duration: 4.360)
commonality of behavior a commonality of (start: 768.320, duration: 4.318)
outcomes so that you don&#39;t have a well (start: 770.359, duration: 4.400)
this is a bug in prod but not in Ci or (start: 772.638, duration: 4.401)
it&#39;s a bug locally but not anywhere else (start: 774.760, duration: 3.878)
right these discrepancies are what slows (start: 777.039, duration: 3.598)
us down as developers it slows down that (start: 778.638, duration: 2.960)
inner (start: 780.638, duration: 3.520)
loop so that&#39;s kind of like a a (start: 781.599, duration: 5.238)
description of the problem um now let&#39;s (start: 784.159, duration: 4.678)
get a in a little bit into what what (start: 786.838, duration: 4.559)
some of the solutions might look (start: 788.838, duration: 5.640)
like so uh about a decade ago came (start: 791.398, duration: 5.721)
across this thing uh called NYX and one (start: 794.479, duration: 5.359)
of its uh kind of early phrases that&#39;s (start: 797.119, duration: 5.119)
in the original thesis is that uh NYX is (start: 799.838, duration: 4.119)
about getting computer programs from one (start: 802.239, duration: 3.480)
machine to another and having them still (start: 803.958, duration: 3.841)
work when they get there I think that&#39;s (start: 805.719, duration: 4.238)
a that&#39;s a statement we can all agree we (start: 807.799, duration: 4.158)
want I mean that&#39;s essentially the (start: 809.958, duration: 4.440)
mission statement I&#39;d say of most people (start: 811.958, duration: 3.841)
writing software you don&#39;t just write (start: 814.398, duration: 3.040)
software for yourself you write software (start: 815.799, duration: 3.440)
so that other people can run it or that (start: 817.440, duration: 3.599)
it can be useful for other people as (start: 819.239, duration: 3.200)
well we don&#39;t just kind of look (start: 821.039, duration: 2.839)
internally we want to be able to push (start: 822.440, duration: 2.920)
things out and have reuse we want to be (start: 823.880, duration: 3.160)
able to distribute our services and (start: 825.359, duration: 3.960)
scale them right this is what this is (start: 827.039, duration: 4.798)
something that we want to do and uh this (start: 829.320, duration: 5.078)
is something that like NX does right and (start: 831.838, duration: 4.000)
this is uh something that we&#39;ve been (start: 834.398, duration: 3.520)
doing since about 2003 right we got a (start: 835.838, duration: 3.881)
whole bunch of packages is we focus a (start: 837.919, duration: 4.479)
lot on correctness and Providence and (start: 839.719, duration: 4.960)
reproducibility we incorporate a lot of (start: 842.398, duration: 4.321)
these best practices that we talk about (start: 844.679, duration: 3.799)
we incorporate them very early in a very (start: 846.719, duration: 3.519)
like disciplined manner you know (start: 848.479, duration: 3.400)
sometimes so disciplined that it might (start: 850.239, duration: 2.838)
be a little painful it&#39;s kind of like (start: 851.880, duration: 2.839)
eating your vegetables but we make sure (start: 853.078, duration: 4.600)
you do it um that also comes with a a (start: 854.719, duration: 4.400)
bit of a learning curve right this is (start: 857.679, duration: 3.039)
something that flock is working on we&#39;re (start: 859.119, duration: 3.279)
trying to make that adoption process (start: 860.719, duration: 3.880)
easier so you know keep an eye out for (start: 862.398, duration: 4.321)
that work uh Upstream I&#39;m also part of (start: 864.599, duration: 3.759)
the Nyx maintainer group that&#39;s also (start: 866.719, duration: 3.918)
part of trying to make this whole effort (start: 868.359, duration: 4.239)
better to make it usable but we want to (start: 870.638, duration: 3.720)
have declarative a framework right (start: 872.599, duration: 3.479)
that&#39;s what we want to be able to (start: 874.359, duration: 3.759)
leverage and the last piece of this is (start: 876.078, duration: 3.641)
like yeah there&#39;s also like a perception (start: 878.119, duration: 3.319)
problem about this ecosystem so part of (start: 879.719, duration: 3.160)
this talk is to try to kind of talk (start: 881.440, duration: 3.078)
about that perception problem and see (start: 882.880, duration: 3.160)
what we could do to to fix this because (start: 884.518, duration: 3.801)
there are some changes here and we want (start: 886.039, duration: 4.280)
to also expose that like there is real (start: 888.320, duration: 4.480)
use behind this you know for example (start: 890.320, duration: 4.400)
yesterday&#39;s keynote was talking about (start: 892.799, duration: 4.000)
the uh Docker debugger extension that&#39;s (start: 894.719, duration: 4.000)
using ncks under the hood as well like (start: 896.799, duration: 3.479)
you&#39;re starting to see a lot more people (start: 898.719, duration: 3.559)
take advantage of this and we have a (start: 900.278, duration: 4.600)
Blog series pointing this out so I just (start: 902.278, duration: 3.960)
want to kind of highlight that these are (start: 904.880, duration: 4.119)
the sorts of things we&#39;re working (start: 906.239, duration: 5.920)
on yeah and ultimately like Docker is (start: 909.000, duration: 5.480)
also a tool for moving software from one (start: 912.159, duration: 6.639)
place to another and so what we&#39;re and (start: 914.479, duration: 6.158)
and it&#39;s actually pretty frequent for (start: 918.799, duration: 5.278)
people to think about Docker versus NYX (start: 920.638, duration: 6.000)
like there there&#39;s a the you if that&#39;s (start: 924.078, duration: 3.841)
the that&#39;s the thing that you&#39;re going (start: 926.638, duration: 4.119)
to see if you search online like do I (start: 927.919, duration: 5.800)
use Docker or do I use NYX and what (start: 930.758, duration: 4.921)
we&#39;re talking about here is Docker and (start: 933.719, duration: 4.479)
Nyx couple of the couple of the reasons (start: 935.679, duration: 4.239)
is that well I mean they they are (start: 938.198, duration: 3.480)
distinct in some ways Docker is a (start: 939.919, duration: 3.640)
container runtime NYX is container (start: 941.679, duration: 4.360)
agnostic NYX has a package repository (start: 943.559, duration: 5.360)
docker&#39;s package agnostic and although (start: 946.039, duration: 5.119)
there there there are ways where we have (start: 948.919, duration: 4.000)
to admit I mean there&#39;s a lot of overlap (start: 951.159, duration: 3.358)
here like they both deal with the (start: 952.919, duration: 4.079)
problem of in install conflicts they&#39;re (start: 954.518, duration: 5.119)
they both have their own ways (start: 957.000, duration: 4.480)
of of looking at (start: 959.638, duration: 5.401)
isolation but they are it turns out that (start: 961.479, duration: 5.559)
that when you when you look at this you (start: 965.039, duration: 4.199)
you I think or at least what we&#39;re what (start: 967.039, duration: 3.960)
we&#39;re we&#39;re trying to experiment with (start: 969.239, duration: 4.800)
here is that they&#39;re very complimentary (start: 971.000, duration: 5.119)
approaches and so that&#39;s what that&#39;s (start: 974.039, duration: 4.238)
what we&#39;re going to get into next yeah a (start: 976.119, duration: 3.359)
lot of what we&#39;re trying to figure out (start: 978.278, duration: 3.081)
is how do we leverage those strengths of (start: 979.479, duration: 3.680)
both and how do we integrate them well (start: 981.359, duration: 4.760)
so that it kind of meets the needs of (start: 983.159, duration: 6.678)
users so um I I don&#39;t know if this helps (start: 986.119, duration: 6.440)
you but this helped me on my journey to (start: 989.838, duration: 4.520)
kind of understand that we&#39;ve got this (start: 992.559, duration: 4.440)
thing called the file hierarchy standard (start: 994.359, duration: 5.800)
FHS and really that&#39;s a way of (start: 997.000, duration: 4.758)
discovering programs and it&#39;s kind of (start: 1000.159, duration: 3.759)
saying hey if you&#39;re looking for a lib (start: 1001.758, duration: 4.960)
where should you go look in user lib if (start: 1003.919, duration: 5.559)
you&#39;re looking for a bin look in bin if (start: 1006.719, duration: 5.840)
uh and the the thing about uh about (start: 1009.479, duration: 6.000)
Nicks or the thing about like about (start: 1012.559, duration: 6.360)
standards like that is what if you have (start: 1015.479, duration: 6.079)
say a program like (start: 1018.919, duration: 5.519)
node and you got two versions you&#39;re in (start: 1021.559, duration: 4.440)
one project you want to use one version (start: 1024.438, duration: 3.400)
in another prod project you want to use (start: 1026.000, duration: 3.959)
another one they conflict like who gets (start: 1027.838, duration: 6.401)
to be user local bin node on your (start: 1029.958, duration: 8.161)
machine and Docker has a solution for (start: 1034.239, duration: 6.880)
that you isolate runtimes every runtime (start: 1038.119, duration: 6.039)
gets to make his own choice NYX also has (start: 1041.119, duration: 5.280)
a solution for that throw away the file (start: 1044.160, duration: 3.918)
hierarchy standard I never really (start: 1046.400, duration: 2.960)
thought could throw away the file (start: 1048.078, duration: 2.960)
hierarchy standard every time I&#39;ve used (start: 1049.359, duration: 3.920)
Linux it&#39;s been there I thought I (start: 1051.038, duration: 4.560)
thought it came I I just thought it was (start: 1053.280, duration: 4.920)
the 11th commandment well there and (start: 1055.599, duration: 5.239)
there you you can use that but and there (start: 1058.199, duration: 3.960)
are conventions there that are very (start: 1060.839, duration: 3.319)
useful but if we&#39;re trying to solve this (start: 1062.160, duration: 3.398)
problem of having software work no (start: 1064.160, duration: 3.119)
matter where it goes you can&#39;t have (start: 1065.558, duration: 4.040)
conflicts right this idea of conflicts (start: 1067.280, duration: 4.079)
once you have no conflicts between (start: 1069.599, duration: 3.519)
different packages or different uh run (start: 1071.359, duration: 3.319)
times or different programs different (start: 1073.119, duration: 3.759)
libraries you start to expose some (start: 1074.678, duration: 4.080)
interesting possibilities yeah and also (start: 1076.880, duration: 5.400)
personal story here I thought that that (start: 1078.760, duration: 5.679)
was going to blow my workflow completely (start: 1082.280, duration: 4.159)
out of the water the idea that my path (start: 1084.439, duration: 3.920)
environment wouldn&#39;t have like user bins (start: 1086.439, duration: 4.118)
and user local bins I was like well (start: 1088.359, duration: 4.599)
that&#39;s just not going to work and it&#39;s (start: 1090.558, duration: 4.119)
one of the few things like it&#39;s one of (start: 1092.959, duration: 4.519)
the things I didn&#39;t notice like it as I (start: 1094.678, duration: 5.480)
moved to Nyx I never noticed that I (start: 1097.479, duration: 4.639)
didn&#39;t have anything in user bin anymore (start: 1100.159, duration: 4.639)
so I my prediction was that this was (start: 1102.119, duration: 5.519)
going to be a huge change and in fact it (start: 1104.798, duration: 5.321)
turned out to be an unnoticeable change (start: 1107.640, duration: 4.278)
that was a surprise to (start: 1110.119, duration: 3.438)
me (start: 1111.918, duration: 6.600)
y um so the other mental shift that (start: 1113.558, duration: 7.160)
you&#39;re going to have to make in order to (start: 1118.520, duration: 3.759)
in order to understand this is there is (start: 1120.719, duration: 4.760)
a transition here from layers to graphs (start: 1122.280, duration: 5.360)
so as we said earlier a couple slides (start: 1125.479, duration: 4.439)
ago when you do a Docker build you are (start: 1127.640, duration: 3.839)
running a set of instructions and (start: 1129.918, duration: 3.801)
producing a producing a set of layers (start: 1131.479, duration: 3.880)
when you&#39;re doing a NYX build you are (start: 1133.719, duration: 3.438)
fullon producing a (start: 1135.359, duration: 4.280)
graph the they are they there&#39;s just a (start: 1137.159, duration: 5.201)
very different underlying construct is (start: 1139.640, duration: 4.679)
this a problem (start: 1142.359, duration: 4.559)
well well it&#39;s also closer to what a (start: 1144.319, duration: 4.280)
developer normally does when you start (start: 1146.918, duration: 3.841)
to compose code right that modularity (start: 1148.599, duration: 3.559)
question from the beginning right you (start: 1150.760, duration: 3.960)
want to grab all these like buckets of (start: 1152.159, duration: 4.721)
wisdom Snippets of wisdom right the (start: 1154.719, duration: 4.360)
error issues that someone has fixed up (start: 1156.880, duration: 3.799)
streams some librar something that&#39;s (start: 1159.079, duration: 3.959)
reusable you grab it from Here There and (start: 1160.678, duration: 4.401)
Everywhere maybe it&#39;s something that my (start: 1163.038, duration: 4.201)
organization puts out as a policy maybe (start: 1165.079, duration: 3.799)
it&#39;s something that Upstream does maybe (start: 1167.239, duration: 3.319)
it&#39;s something some other library that I (start: 1168.880, duration: 3.279)
wrote some other department wrote right (start: 1170.558, duration: 4.080)
you want to pull all these pieces in and (start: 1172.159, duration: 4.361)
again this looks far more like the (start: 1174.640, duration: 4.480)
standard programming model of hey I pull (start: 1176.520, duration: 4.599)
in libraries that are useful to me that (start: 1179.119, duration: 3.960)
are necessary right we&#39;re just kind of (start: 1181.119, duration: 3.720)
taking that similar model rather than (start: 1183.079, duration: 4.159)
only saying hey this Library can only be (start: 1184.839, duration: 4.400)
stacked under this library and that one (start: 1187.239, duration: 3.519)
right I pull the ones in that I need (start: 1189.239, duration: 2.678)
that brings in the wisdom and (start: 1190.760, duration: 3.398)
functionality that I need encoded in (start: 1191.918, duration: 4.239)
those locations yeah I mean sometimes I (start: 1194.159, duration: 3.680)
think in terms of stacks like every so (start: 1196.159, duration: 3.519)
often I look at a a thing a set of (start: 1197.839, duration: 3.680)
layers and it like makes this model in (start: 1199.678, duration: 3.480)
my head I go oh yeah that&#39;s the stack (start: 1201.520, duration: 3.158)
that I&#39;m running on but when I think (start: 1203.159, duration: 3.280)
about the actual program I often think (start: 1204.678, duration: 4.040)
about the dependency graph that that (start: 1206.439, duration: 4.238)
supports that so I I sort of feel like I (start: 1208.719, duration: 3.838)
I in in practice think of think of this (start: 1210.678, duration: 3.921)
in two different ways and they both have (start: 1212.558, duration: 4.080)
their uses (start: 1214.599, duration: 4.400)
yeah all right and how do we manage this (start: 1216.640, duration: 4.679)
graph right this graph is obviously more (start: 1219.000, duration: 5.199)
complicated than a set of layers and so (start: 1221.319, duration: 5.320)
uh one thing that we are looking at is (start: 1224.199, duration: 4.119)
well hey we talked about that multi (start: 1226.640, duration: 3.480)
stage build right how do we take that (start: 1228.319, duration: 3.479)
graph the set of things that you have (start: 1230.119, duration: 4.199)
and then carve out of it only the things (start: 1231.798, duration: 4.040)
you need at runtime because very often (start: 1234.319, duration: 3.358)
the context you need a build time is far (start: 1235.839, duration: 4.480)
bigger right and I want to pull that out (start: 1237.678, duration: 4.239)
copy that out and that&#39;s essentially the (start: 1240.319, duration: 3.719)
beginnings of exactly that best practice (start: 1241.918, duration: 4.040)
of don&#39;t bring all your build (start: 1244.038, duration: 4.321)
environment with you into prod right (start: 1245.959, duration: 4.440)
just bring what you need for runtime (start: 1248.359, duration: 4.239)
right and is this and one question here (start: 1250.400, duration: 6.519)
is how hard is this so when we when we (start: 1252.599, duration: 7.000)
decide to do a build our tool constructs (start: 1256.918, duration: 4.841)
a build graph for us when we decide to (start: 1259.599, duration: 5.159)
copy a runtime over how easy is it for (start: 1261.760, duration: 6.760)
us to to ask our tools to go give me the (start: 1264.760, duration: 6.599)
smallest graph that I need so that I can (start: 1268.520, duration: 4.519)
copy it over there is that an easy thing (start: 1271.359, duration: 4.039)
or is that a hard thing and that&#39;s one (start: 1273.038, duration: 3.801)
of the things that NYX provides is (start: 1275.400, duration: 3.480)
basically you get this for free right (start: 1276.839, duration: 5.800)
that&#39;s one you know one outcome that you (start: 1278.880, duration: 5.719)
get and this leads to something (start: 1282.640, duration: 4.960)
interesting uh so because we have that (start: 1284.599, duration: 4.599)
kind of book book keeping of all those (start: 1287.599, duration: 3.279)
inputs right the inputs that function of (start: 1289.199, duration: 3.838)
input and out because you do really good (start: 1290.880, duration: 3.918)
bookkeeping of that and then because you (start: 1293.038, duration: 3.401)
give all of those things really precise (start: 1294.798, duration: 3.801)
names right those names are going to be (start: 1296.439, duration: 4.079)
basically including the hash of all the (start: 1298.599, duration: 4.360)
things that it took to create them now (start: 1300.520, duration: 5.199)
we&#39;ve got naming which allows me to do (start: 1302.959, duration: 4.598)
caching right those two those are two of (start: 1305.719, duration: 3.838)
the Cs problems that we have right the (start: 1307.558, duration: 4.080)
last one&#39;s off by one errors but now (start: 1309.558, duration: 4.480)
that we&#39;ve solve them now you get a (start: 1311.640, duration: 4.440)
really powerful capability where we can (start: 1314.038, duration: 4.841)
start to pull in uh caching Behavior (start: 1316.079, duration: 4.119)
where otherwise it was either difficult (start: 1318.880, duration: 3.398)
to do or I can share with a team or I (start: 1320.199, duration: 4.039)
can share with an organization and to do (start: 1322.279, duration: 4.201)
so safely right caching and validation (start: 1324.239, duration: 5.400)
is always an issue but if that is no (start: 1326.479, duration: 5.400)
longer a problem what are the (start: 1329.640, duration: 5.199)
possibilities yeah yeah exact and I mean (start: 1331.880, duration: 5.239)
back to this abstraction at the bottom (start: 1334.839, duration: 5.519)
here if I know the inputs and the inputs (start: 1337.119, duration: 5.400)
don&#39;t change and I get the same output I (start: 1340.359, duration: 4.719)
have a strategy for what for how caching (start: 1342.520, duration: 6.719)
should be and this is like in some ways (start: 1345.079, duration: 6.198)
the the fact that NYX is constantly (start: 1349.239, duration: 5.439)
pushing me to to Define this is one of (start: 1351.279, duration: 5.560)
the things that I like the best about it (start: 1354.678, duration: 3.960)
and kind of one of the things that is (start: 1356.839, duration: 5.039)
sort of like the hardest so earlier when (start: 1358.640, duration: 5.800)
I said it was really easy to get used to (start: 1361.880, duration: 5.199)
not having the FHS standard it&#39;s (start: 1364.439, duration: 5.839)
actually really hard to get used to the (start: 1367.079, duration: 5.519)
fact that NYX is constantly pushing me (start: 1370.279, duration: 4.639)
to really be clear about what my inputs (start: 1372.599, duration: 5.439)
are because I&#39;ve gotten lazy and in fact (start: 1374.918, duration: 4.760)
fact sometimes I think I know what my (start: 1378.038, duration: 3.440)
inputs are and then I actually do the (start: 1379.678, duration: 3.401)
build and I go I did not know what my (start: 1381.479, duration: 4.798)
inputs were and it&#39;s so it&#39;s it&#39;s (start: 1383.079, duration: 5.000)
putting that front and center and in the (start: 1386.279, duration: 4.080)
end I mean I&#39;m getting some I I get (start: 1388.079, duration: 4.198)
somewhere where I&#39;ve I have isolated (start: 1390.359, duration: 3.319)
this but it&#39;s like running this little (start: 1392.279, duration: 3.921)
experiment over and over again making (start: 1393.678, duration: 5.119)
sure that my in my inputs are producing (start: 1396.199, duration: 4.559)
the this output reliably and and (start: 1398.798, duration: 3.680)
consistently and I&#39;m doing that at build (start: 1400.760, duration: 3.359)
time and I&#39;m doing that (start: 1402.479, duration: 3.920)
continuously and and why do we do this (start: 1404.119, duration: 4.280)
right because I&#39;ve often found if you (start: 1406.400, duration: 3.720)
don&#39;t do something like this you will (start: 1408.400, duration: 3.680)
inevitably pay for it it might speed (start: 1410.119, duration: 5.280)
something up day one but day 10 day 100 (start: 1412.079, duration: 5.320)
you will end up paying for if there&#39;s (start: 1415.400, duration: 3.319)
something that you didn&#39;t track you (start: 1417.400, duration: 2.720)
didn&#39;t know that you depended on (start: 1418.719, duration: 3.680)
something there was some remote resource (start: 1420.119, duration: 4.919)
some service some random like you know (start: 1422.400, duration: 4.119)
corporate resource that you needed to (start: 1425.038, duration: 2.841)
access and if you didn&#39;t track it you (start: 1426.520, duration: 3.680)
didn&#39;t know that it was there it almost (start: 1427.880, duration: 4.960)
always comes back to bite you and so uh (start: 1430.199, duration: 5.519)
dealing with it upfront is an investment (start: 1432.839, duration: 7.039)
again but it&#39;s worthwhile (start: 1435.719, duration: 4.159)
okay so here&#39;s what we what we did in (start: 1440.359, duration: 3.519)
order to try to like Bridge these two (start: 1442.239, duration: 3.640)
worlds and make it really easy to start (start: 1443.880, duration: 4.639)
with NYX and have a a path towards (start: 1445.880, duration: 4.480)
building uh working in the docker (start: 1448.520, duration: 4.199)
ecosystem with it um so I&#39;m going to (start: 1450.359, duration: 3.880)
explain this this (start: 1452.719, duration: 4.198)
approach and just want to highlight that (start: 1454.239, duration: 4.000)
one of the things we tried to do with (start: 1456.918, duration: 2.921)
this is just use Docker file best (start: 1458.239, duration: 3.880)
practices so we went we went through and (start: 1459.839, duration: 4.519)
we we made sure that we are looking at (start: 1462.119, duration: 4.039)
build contexts appropriately running (start: 1464.359, duration: 4.079)
with do Docker ignores using multi-stage (start: 1466.159, duration: 4.600)
builds having like very carefully (start: 1468.439, duration: 5.039)
crafted run statements and we&#39;ve come up (start: 1470.760, duration: 5.679)
with a uh a Docker file that represents (start: 1473.479, duration: 5.639)
these these best practices and um and (start: 1476.439, duration: 6.039)
uses Nicks and this Docker file supports (start: 1479.119, duration: 6.239)
a bunch of applications and uh we we (start: 1482.479, duration: 4.880)
we&#39;ve we&#39;ve got sample applications that (start: 1485.359, duration: 5.280)
we can we can uh let everyone look at we (start: 1487.359, duration: 5.519)
tried to have a fairly diverse set of (start: 1490.640, duration: 5.000)
TCH Stacks here and we also tried to use (start: 1492.880, duration: 4.840)
a diverse set of different package e (start: 1495.640, duration: 4.239)
ecosystems to make sure that what we&#39;re (start: 1497.719, duration: 4.880)
trying to do here is actually you know (start: 1499.880, duration: 5.360)
working across a diverse set of (start: 1502.599, duration: 5.318)
applications so let me explain a little (start: 1505.239, duration: 4.480)
bit what the what the shim actually (start: 1507.918, duration: 5.239)
actually does and one of the highlights (start: 1509.719, duration: 4.519)
or one of the the things that&#39;s (start: 1513.159, duration: 2.519)
interesting about it is we&#39;ve stopped (start: 1514.239, duration: 3.240)
using base (start: 1515.678, duration: 5.281)
images so of course we bootstrap the (start: 1517.479, duration: 6.039)
process um at the at there at the (start: 1520.959, duration: 5.959)
beginning but going back to that idea of (start: 1523.520, duration: 5.840)
using of building the graph once we&#39;ve (start: 1526.918, duration: 5.480)
built the graph we just copy that over (start: 1529.359, duration: 5.000)
into our final image and the final image (start: 1532.399, duration: 3.440)
is always (start: 1534.359, duration: 4.840)
scratch so you don&#39;t see so this (start: 1535.839, duration: 6.159)
particular this particular methodology (start: 1539.199, duration: 5.400)
doesn&#39;t actually use base (start: 1542.000, duration: 6.440)
images the build itself starts by (start: 1544.599, duration: 5.519)
Computing what is the build time graph (start: 1548.439, duration: 3.759)
that you need and pulls that (start: 1550.119, duration: 5.678)
in step two it runs the (start: 1552.199, duration: 6.598)
build step three it computes a minimal (start: 1555.798, duration: 5.721)
runtime graph and step four it (start: 1558.798, duration: 6.160)
constructs an sbom from that graph so it (start: 1561.520, duration: 5.679)
it constructs that it it looks at the (start: 1564.959, duration: 3.920)
runtime that you&#39;ve built and the build (start: 1567.199, duration: 3.959)
time and Records all of the packages (start: 1568.880, duration: 5.239)
that that have gone in as a as an esbb (start: 1571.159, duration: 5.239)
so if we take a take a look at that (start: 1574.119, duration: 3.880)
break that down a little bit this is (start: 1576.399, duration: 3.000)
kind of the most (start: 1578.000, duration: 5.039)
interesting statement in the the if oh (start: 1579.399, duration: 5.400)
yeah the this is this is the kind of the (start: 1583.038, duration: 2.960)
most interesting statement in this whole (start: 1584.798, duration: 3.321)
Docker file because (start: 1586.000, duration: 5.639)
the Highlight here is that the Nyx is a (start: 1588.119, duration: 4.400)
graph (start: 1591.640, duration: 4.119)
database and so what I do right at the (start: 1592.520, duration: 5.480)
end of the build is I query that graph (start: 1595.760, duration: 5.399)
database for my runtime and that&#39;s all (start: 1598.000, duration: 6.199)
I&#39;m doing right there is I&#39;m I&#39;m asking (start: 1601.159, duration: 5.841)
I&#39;m asking NYX for the minimal runtime (start: 1604.199, duration: 4.679)
so that I have that and I can copy it to (start: 1607.000, duration: 4.039)
the next to the next stage so that qu (start: 1608.880, duration: 4.360)
that answer to the question is this easy (start: 1611.038, duration: 5.639)
it is easy it doesn&#39;t have it doesn&#39;t (start: 1613.239, duration: 4.919)
have any (start: 1616.678, duration: 4.160)
language specific technology specific or (start: 1618.159, duration: 5.801)
package ecosystem specific work in it (start: 1620.839, duration: 5.039)
it&#39;s just one line and it&#39;s always the (start: 1623.959, duration: 5.159)
same because again we you letting it (start: 1625.880, duration: 4.678)
we&#39;re letting the software do the work (start: 1629.119, duration: 4.199)
here NYX is is is has already a graph (start: 1630.558, duration: 5.000)
database so let&#39;s just query it you have (start: 1633.319, duration: 3.200)
something there that&#39;s doing the (start: 1635.558, duration: 2.720)
bookkeeping for you right that (start: 1636.520, duration: 4.000)
bookkeeping helps you do this safely so (start: 1638.279, duration: 4.201)
again it tracks it you don&#39;t have to (start: 1640.520, duration: 3.720)
track it humans are really bad at (start: 1642.479, duration: 3.918)
keeping track of what you need what you (start: 1644.239, duration: 4.039)
don&#39;t need how to allocate it how to (start: 1646.399, duration: 3.440)
deallocate it uh whether those (start: 1648.279, duration: 3.519)
references are still alive or dead (start: 1649.839, duration: 3.719)
doesn&#39;t sound like something humans tend (start: 1651.798, duration: 3.081)
to be good at in fact those are the (start: 1653.558, duration: 3.720)
things that tend to lead towards (start: 1654.880, duration: 4.480)
vulnerabilities this next line um (start: 1657.279, duration: 4.080)
generates an s bomb from that runtime (start: 1659.359, duration: 5.519)
graph um so we we want to make that as (start: 1661.359, duration: 7.039)
declarative as possible and uh finally (start: 1664.880, duration: 7.278)
we copy the contents into into our into (start: 1668.399, duration: 5.880)
our final image um that&#39;s probably (start: 1672.159, duration: 5.681)
pretty obvious I want to highlight that (start: 1674.279, duration: 5.480)
like let&#39;s make sure that we&#39;re using (start: 1677.839, duration: 3.759)
buildkit appropriately here let&#39;s make (start: 1679.760, duration: 3.599)
sure we&#39;re using Docker appropriately so (start: 1681.599, duration: 3.959)
let&#39;s always set up our cache mounting (start: 1683.359, duration: 4.400)
correctly so that our our builds this is (start: 1685.558, duration: 5.239)
going to be 95% speed up on on anytime (start: 1687.760, duration: 6.039)
you do more than one build um we also (start: 1690.798, duration: 5.681)
are in the next line we&#39;re setting up to (start: 1693.798, duration: 5.160)
use your build context (start: 1696.479, duration: 4.400)
appropriately often you don&#39;t know (start: 1698.959, duration: 3.759)
whether your build context can be read (start: 1700.880, duration: 4.840)
only with NYX your build context can (start: 1702.719, duration: 6.360)
100% of the time be be read only um so (start: 1705.719, duration: 5.280)
this is always safe to do notice there&#39;s (start: 1709.079, duration: 4.598)
never there&#39;s no copy statements build (start: 1711.000, duration: 4.480)
copying your source code into this into (start: 1713.678, duration: 3.921)
this build stage we just Mount the build (start: 1715.479, duration: 6.239)
context directly and finally it&#39;s kind (start: 1717.599, duration: 7.599)
of an an interesting thing that NYX like (start: 1721.719, duration: 5.480)
we said it&#39;s insanely cachable so that (start: 1725.199, duration: 4.920)
we we can set this up so that our (start: 1727.199, duration: 5.839)
private packages are always shared in a (start: 1730.119, duration: 4.760)
local network so if you&#39;re two people (start: 1733.038, duration: 3.401)
are doing the same build with the same (start: 1734.880, duration: 3.200)
inputs and some someone&#39;s already done (start: 1736.439, duration: 4.159)
it you can grab it this cache is this (start: 1738.079, duration: 4.318)
cach is meant to be something simple (start: 1740.599, duration: 4.840)
like an S3 bucket or SSH or something (start: 1742.399, duration: 4.040)
like (start: 1745.439, duration: 2.959)
that (start: 1746.439, duration: 4.199)
yep um and I think like the important (start: 1748.399, duration: 4.280)
thing about this this idea is it&#39;s just (start: 1750.640, duration: 3.398)
regular Docker build so we&#39;re not (start: 1752.678, duration: 3.599)
changing anything here you just run you (start: 1754.038, duration: 4.639)
just run a Docker file with Docker build (start: 1756.279, duration: 4.000)
um if you want to store your sbom (start: 1758.678, duration: 4.119)
attestations maybe you have a few extra (start: 1760.279, duration: 4.801)
buildkit Flags there to store to store (start: 1762.798, duration: 5.681)
that attestation and just a little like (start: 1765.079, duration: 5.159)
hint towards what we&#39;re what we&#39;re kind (start: 1768.479, duration: 4.719)
of looking at here um if you&#39;re if the (start: 1770.239, duration: 5.519)
docker file is always the same for every (start: 1773.199, duration: 4.760)
pro project then maybe we just don&#39;t (start: 1775.760, duration: 3.480)
pass (start: 1777.959, duration: 4.439)
it maybe we just put that right into (start: 1779.239, duration: 6.158)
Docker and with better buildkit and Nyx (start: 1782.399, duration: 4.960)
integration right you can actually make (start: 1785.399, duration: 3.279)
these things so that you don&#39;t have to (start: 1787.359, duration: 3.240)
repeat yourself so much you can inherit (start: 1788.678, duration: 4.000)
those wisdom wherever it comes um there (start: 1790.599, duration: 4.360)
was a talk earlier today about exactly (start: 1792.678, duration: 4.119)
this same thing and so we think this is (start: 1794.959, duration: 3.519)
a rich ecosystem here where we can (start: 1796.798, duration: 3.520)
figure out what is the best way to (start: 1798.479, duration: 4.639)
incorporate this and right uh end up (start: 1800.319, duration: 5.320)
with results that we (start: 1803.119, duration: 6.278)
want okay so some results um build time (start: 1805.640, duration: 7.919)
versus runtime graph the ideally here (start: 1809.399, duration: 7.361)
what you&#39;re going to see is that there (start: 1813.558, duration: 5.801)
when you when you have a large build (start: 1816.760, duration: 5.320)
time and a small run time you&#39;re going (start: 1819.359, duration: 4.119)
to see a big difference in your final (start: 1822.079, duration: 3.400)
images and so we just wanted to go (start: 1823.479, duration: 4.078)
through a couple like standard apps and (start: 1825.479, duration: 3.799)
just show you the difference between how (start: 1827.558, duration: 4.599)
many packages that&#39;s the that&#39;s the the (start: 1829.279, duration: 4.721)
blue line or the the line that tends to (start: 1832.159, duration: 4.201)
be long how many packages are in your (start: 1834.000, duration: 4.119)
build time and are necessary to do that (start: 1836.359, duration: 4.119)
and how many are in your runtime and (start: 1838.119, duration: 4.278)
this is all these are all reductions in (start: 1840.479, duration: 3.519)
packages that you just sort of get for (start: 1842.399, duration: 3.440)
free this just this just sort of like (start: 1844.000, duration: 5.519)
pops out of using this pattern yeah and (start: 1845.839, duration: 5.839)
so we can dig into a few other examples (start: 1849.519, duration: 3.680)
where hey for a node application (start: 1851.678, duration: 3.200)
something is now you know smaller we (start: 1853.199, duration: 3.319)
have smaller packages right there&#39;s less (start: 1854.880, duration: 3.678)
stuff now to audit there&#39;s less stuff to (start: 1856.519, duration: 3.921)
keep track of that tends to be a good (start: 1858.558, duration: 3.161)
thing right there&#39;s less perhaps less (start: 1860.439, duration: 3.118)
paperwork I got to do less compliance I (start: 1861.719, duration: 3.559)
have to do right less times I have to be (start: 1863.558, duration: 3.720)
aware of like false alarms and we&#39;re not (start: 1865.279, duration: 4.321)
paying like a huge cost for this right (start: 1867.279, duration: 4.119)
in fact this is a huge benefit it gets (start: 1869.599, duration: 3.599)
rid of the the sort of tedious work I (start: 1871.399, duration: 4.321)
don&#39;t want to do another example here is (start: 1873.199, duration: 4.280)
in the golang world okay again we can (start: 1875.719, duration: 3.438)
start to trim out these containers we (start: 1877.479, duration: 4.039)
can make them smaller uh rebuild time on (start: 1879.159, duration: 3.720)
this one kind of suffered a little bit (start: 1881.519, duration: 2.601)
but these are things that we&#39;re working (start: 1882.880, duration: 3.359)
on right um flx is trying to figure this (start: 1884.119, duration: 4.639)
out on how do I correct Al reuse the go (start: 1886.239, duration: 5.278)
go go mod cache in a way to make it that (start: 1888.760, duration: 4.519)
uh we get the same or better rebuild (start: 1891.519, duration: 3.801)
times take a look at the packages right (start: 1893.279, duration: 4.000)
go is famous for you know compiling down (start: 1895.319, duration: 3.719)
all your everything into one thing well (start: 1897.279, duration: 4.119)
and that&#39;s awesome like we we need this (start: 1899.038, duration: 4.201)
and let&#39;s actually get rid of all the (start: 1901.399, duration: 3.081)
other things in your containers that you (start: 1903.239, duration: 4.318)
don&#39;t need um so that comes up often and (start: 1904.479, duration: 5.318)
think about how many uh false alarms on (start: 1907.558, duration: 4.599)
those other uh 29 packages you&#39;re going (start: 1909.798, duration: 4.520)
to have to deal with when some uh you (start: 1912.159, duration: 3.960)
know some security tool says hey you (start: 1914.319, duration: 2.719)
have a problem there you&#39;re like we&#39;re (start: 1916.119, duration: 3.438)
not using it it&#39;s not in the runtime (start: 1917.038, duration: 5.160)
well the tool doesn&#39;t know that right or (start: 1919.558, duration: 4.160)
maybe it might guess that it is or might (start: 1922.199, duration: 3.479)
guess that it&#39;s not but be wh would to (start: 1923.719, duration: 4.280)
take care of that just remove it (start: 1925.678, duration: 5.480)
right uh here&#39;s a python right again how (start: 1928.000, duration: 5.840)
digging out a python application out of (start: 1931.159, duration: 5.321)
that build time environment is a often a (start: 1933.839, duration: 4.718)
very risky proposition imagine doing (start: 1936.479, duration: 4.239)
that for free right here if that (start: 1938.558, duration: 4.599)
Baseline image has you know 64 pieces of (start: 1940.719, duration: 4.239)
paperwork I got to figure out to kind of (start: 1943.159, duration: 3.680)
get my compliance all right now I only (start: 1944.959, duration: 4.000)
have too I&#39;ve probably saved myself a (start: 1946.839, duration: 4.519)
lot of (start: 1948.959, duration: 2.400)
time yeah so um you know we&#39;ve we&#39;ve (start: 1951.678, duration: 6.321)
kind of looked at this transition from (start: 1955.439, duration: 5.280)
layers to graphs um I think one (start: 1958.000, duration: 6.239)
interesting thing to to think about is (start: 1960.719, duration: 7.280)
what if every package was a (start: 1964.239, duration: 6.480)
layer yeah packages and layers right we (start: 1968.000, duration: 5.079)
saw earlier uh do Scout went into this (start: 1970.719, duration: 4.039)
of trying to tell like when did a (start: 1973.079, duration: 3.039)
package show up or when did a piece of (start: 1974.760, duration: 3.839)
software show up well let&#39;s kind of make (start: 1976.119, duration: 4.480)
this relationship a little bit closer (start: 1978.599, duration: 3.559)
layers and packages are kind of are (start: 1980.599, duration: 3.279)
trying to do the same thing and (start: 1982.159, duration: 4.000)
amazingly under the hood in Docker (start: 1983.880, duration: 4.678)
itself uh layers are independent like in (start: 1986.159, duration: 4.201)
containers right these are just content (start: 1988.558, duration: 3.720)
addressed like blobs and they&#39;re (start: 1990.359, duration: 3.678)
independent of each other except the (start: 1992.279, duration: 3.801)
only way you can often use them is by (start: 1994.038, duration: 5.360)
layering them one under the other and if (start: 1996.079, duration: 5.000)
we actually understand that each of (start: 1999.399, duration: 3.200)
these layers are independent right (start: 2001.079, duration: 2.680)
they&#39;re not going to conflict with each (start: 2002.599, duration: 3.198)
other we open up a lot of interesting (start: 2003.760, duration: 4.079)
possibilities right we now no longer (start: 2005.798, duration: 3.960)
maybe have uh no longer have that layer (start: 2007.839, duration: 3.799)
limitation we don&#39;t have to use overlay (start: 2009.760, duration: 3.559)
a Fest we can bind Mount things we can (start: 2011.639, duration: 3.361)
do things faster and in parallel we can (start: 2013.319, duration: 4.280)
get better sharing and reuse because now (start: 2015.000, duration: 3.880)
I could push these around because (start: 2017.599, duration: 3.559)
they&#39;re Conflict Free I don&#39;t have to be (start: 2018.880, duration: 5.519)
so methodically putting a b c d i could (start: 2021.159, duration: 5.040)
just get everything all at once and (start: 2024.399, duration: 4.159)
bring them all in in any order I see fit (start: 2026.199, duration: 4.479)
again because they&#39;re Conflict (start: 2028.558, duration: 4.079)
Free yeah I sort of think about it as (start: 2030.678, duration: 3.641)
you&#39;ve sort of changed the rules of the (start: 2032.639, duration: 5.280)
game a little bit because ultimately (start: 2034.319, duration: 6.959)
the we we have to think about layers in (start: 2037.918, duration: 5.841)
terms of order because one layer can (start: 2041.279, duration: 5.280)
always delete something and you have to (start: 2043.760, duration: 4.719)
apply them like that what what happens (start: 2046.558, duration: 4.559)
if that&#39;s impossible if all of your if (start: 2048.479, duration: 4.239)
all of your packages are fundamentally (start: 2051.118, duration: 3.440)
Conflict Free you&#39;ve just kind of (start: 2052.719, duration: 4.559)
changed the nature of how of the (start: 2054.560, duration: 4.159)
optimization you&#39;ve changed the rules of (start: 2057.280, duration: 2.200)
the (start: 2058.719, duration: 3.079)
game absolutely all right we&#39;re go into (start: 2059.479, duration: 4.399)
a little bit of demo to Showcase like (start: 2061.800, duration: 4.400)
what this is um so first off we&#39;re going (start: 2063.878, duration: 4.440)
to talk about this uh this shim that (start: 2066.199, duration: 3.678)
Docker file that encodes the best (start: 2068.320, duration: 5.559)
practices for us all right let&#39;s uh get (start: 2069.878, duration: 6.480)
this figured (start: 2073.878, duration: 2.480)
out all right so here we have an example (start: 2084.599, duration: 4.841)
this is one of uh uh docker&#39;s repos and (start: 2087.040, duration: 5.280)
cool we&#39;re going to uh try to uh run (start: 2089.439, duration: 5.119)
this (start: 2092.320, duration: 2.240)
thing using Bill kit it loads the (start: 2095.520, duration: 5.039)
context that it needs applies those best (start: 2098.439, duration: 4.280)
practices it runs it in this case looks (start: 2100.560, duration: 3.599)
like well it was cached already which is (start: 2102.719, duration: 3.079)
an awesome thing and now I don&#39;t have to (start: 2104.159, duration: 4.480)
worry about this so the application of (start: 2105.800, duration: 5.159)
the best practices was just done for me (start: 2108.639, duration: 3.559)
if we take a look at like what this (start: 2110.959, duration: 4.519)
looks like it&#39;s basically the each line (start: 2112.199, duration: 5.320)
of these things encodes one of the (start: 2115.479, duration: 4.879)
documented Docker file best practices so (start: 2117.520, duration: 4.119)
that&#39;s all we&#39;re just trying to Showcase (start: 2120.358, duration: 3.161)
here that this thing uh it works it (start: 2121.639, duration: 7.159)
works today and uh it&#39;s in use yeah (start: 2123.520, duration: 5.280)
awesome all right uh next thing I was (start: 2129.040, duration: 5.159)
going to Showcase (start: 2131.159, duration: 5.320)
is uh a little bit of I want to talk (start: 2134.199, duration: 4.440)
about uh some of these graphs some of (start: 2136.479, duration: 4.320)
these things that we can uh you know (start: 2138.639, duration: 5.360)
talk about and let&#39;s uh clear this out (start: 2140.800, duration: 4.679)
so let&#39;s say I got some kind of random (start: 2144.000, duration: 3.598)
project all right we&#39;re project raccoon (start: 2145.479, duration: 4.079)
I want to figure out uh what I&#39;m doing (start: 2147.599, duration: 4.640)
and we really really like uh something (start: 2149.560, duration: 5.960)
called cow except uh I don&#39;t have it (start: 2152.239, duration: 4.719)
anymore I don&#39;t have it right now like (start: 2155.520, duration: 2.440)
that kind of sucks that&#39;s that&#39;s (start: 2156.959, duration: 2.200)
annoying and maybe you have a different (start: 2157.959, duration: 2.480)
one and I have a different one and it (start: 2159.159, duration: 3.158)
requires all sorts of pearl things and I (start: 2160.439, duration: 3.918)
don&#39;t even know Pearl so how do I get (start: 2162.319, duration: 5.361)
cpan set up H that&#39;s annoying well what (start: 2164.358, duration: 5.160)
if I just kind of had this stuff as soon (start: 2167.679, duration: 4.280)
as I enter uh let&#39;s say project bunny I (start: 2169.520, duration: 4.280)
want to go into project bunny we have a (start: 2171.959, duration: 4.399)
very kind of uh critical uh thing we (start: 2173.800, duration: 6.000)
want to do we want Mobi to say bunny (start: 2176.358, duration: 6.000)
great well do I have C now all right (start: 2179.800, duration: 4.400)
cool now I have it all right but that&#39;s (start: 2182.358, duration: 4.201)
not Moby so instead we&#39;re going to do a (start: 2184.199, duration: 3.918)
whole whole bunch of programming whole (start: 2186.560, duration: 4.119)
bunch of uh design iteration and like (start: 2188.118, duration: 3.881)
product is going to have a say in all (start: 2190.679, duration: 2.799)
this but eventually we end up with being (start: 2192.000, duration: 4.519)
able to say all right cool now Mobi says (start: 2193.479, duration: 5.598)
bunny I love that and I get to move on (start: 2196.520, duration: 5.078)
with my life ah no I got to deploy this (start: 2199.079, duration: 5.160)
I need to scale this this has to be done (start: 2201.599, duration: 4.921)
100 thousand times all across the world (start: 2204.239, duration: 3.960)
so instead I now need to make sure this (start: 2206.520, duration: 3.960)
thing is containerized well all right (start: 2208.199, duration: 4.118)
I&#39;m going to do a little bit of uh (start: 2210.479, duration: 4.239)
loading this into Docker cool I&#39;m going (start: 2212.319, duration: 4.201)
to grab only the runtime portions these (start: 2214.719, duration: 3.200)
are are all these pads you saw kind of (start: 2216.520, duration: 3.799)
Roll by here I&#39;m only going to grab that (start: 2217.919, duration: 4.399)
portion not all the other portions of (start: 2220.319, duration: 3.641)
pearl or all the other libraries that I (start: 2222.319, duration: 3.121)
might have used for development or (start: 2223.959, duration: 4.559)
linting or debugging because I mean (start: 2225.439, duration: 4.638)
debugging Pearl you need all sorts of (start: 2228.520, duration: 4.280)
other things but now I have a container (start: 2230.079, duration: 5.960)
and I run that container boom now Mobi (start: 2232.800, duration: 5.318)
says Bunny and now I can push this all (start: 2236.040, duration: 4.840)
over the globe scale up infinitely and (start: 2238.118, duration: 6.801)
uh life is good and kpis go up all right (start: 2240.879, duration: 5.840)
what happened now uh let&#39;s kind of like (start: 2244.919, duration: 3.079)
dig into a little bit of what&#39;s going on (start: 2246.719, duration: 3.279)
I&#39;m going to try to kind of colorize a (start: 2248.000, duration: 2.799)
few (start: 2250.000, duration: 2.680)
things all right this is the list of (start: 2250.800, duration: 3.319)
packages that I needed right they&#39;re (start: 2252.679, duration: 3.000)
colored in green that means this is (start: 2254.118, duration: 3.240)
stuff I needed at runtime this is just (start: 2255.679, duration: 4.439)
your runtime Yep this is it now (start: 2257.358, duration: 4.040)
obviously because I&#39;m running some (start: 2260.118, duration: 2.801)
complicated programming at all sorts of (start: 2261.399, duration: 4.400)
random stuff but I need more when I do (start: 2262.919, duration: 5.760)
build well what do I need during build (start: 2265.800, duration: 5.840)
well it&#39;s going to be more things right (start: 2268.679, duration: 4.360)
I need all sorts of I don&#39;t know (start: 2271.639, duration: 3.759)
debuggers and make and tools and gzip (start: 2273.040, duration: 3.720)
and I don&#39;t know all sorts of Random (start: 2275.399, duration: 3.678)
stuff has come in because hey developers (start: 2276.760, duration: 4.639)
they like all their random tools this is (start: 2279.079, duration: 5.201)
all needed for building but I need more (start: 2281.399, duration: 4.360)
than this right when I want to do (start: 2284.280, duration: 3.078)
development I need all this stuff I need (start: 2285.760, duration: 3.078)
to build my software but also need to (start: 2287.358, duration: 3.440)
develop my software so there&#39;s a whole (start: 2288.839, duration: 5.120)
another set of things I might need right (start: 2290.800, duration: 5.199)
which here are going to be uh in purple (start: 2293.959, duration: 3.319)
like these are stuff I might need like I (start: 2296.000, duration: 4.078)
mean I need cxs I don&#39;t need that during (start: 2297.280, duration: 5.559)
build I don&#39;t need that during runtime I (start: 2300.079, duration: 4.801)
need that while I&#39;m kind to Traverse a (start: 2302.839, duration: 4.321)
code base so you can see we have like (start: 2304.879, duration: 4.159)
all the stuff that you might need and (start: 2307.159, duration: 3.640)
how we kind of also can pull stuff out (start: 2309.040, duration: 4.519)
of that graph pull the components out (start: 2310.800, duration: 4.360)
that are necessary for any one (start: 2313.560, duration: 3.839)
particular time and turn that into (start: 2315.159, duration: 4.239)
something that&#39;s either minimal or (start: 2317.399, duration: 3.959)
constrained in some way so that I don&#39;t (start: 2319.399, duration: 3.559)
have to deal with this entire build (start: 2321.358, duration: 3.240)
graph I only have to deal with the (start: 2322.959, duration: 3.279)
portion that&#39;s needed for let&#39;s say (start: 2324.599, duration: 4.239)
development or for the build or for (start: 2326.239, duration: 5.440)
runtime and that starts to trim things (start: 2328.839, duration: 7.321)
down so back to our our CI prod and and (start: 2331.679, duration: 6.079)
Dev (start: 2336.159, duration: 3.279)
do we have like one common definition (start: 2337.760, duration: 3.519)
for these or do we do we do you think (start: 2339.439, duration: 3.279)
about how would how would you describe (start: 2341.280, duration: 4.159)
that uh this is something that then it&#39;s (start: 2342.719, duration: 5.399)
one definition again it&#39;s one system one (start: 2345.439, duration: 4.360)
definition that I get to use for (start: 2348.118, duration: 4.480)
development I get to then have this uh (start: 2349.800, duration: 4.639)
pop into existence right when I go into (start: 2352.599, duration: 3.361)
that project right if I&#39;m in Project (start: 2354.439, duration: 3.440)
bunny then cool I get access to all (start: 2355.959, duration: 5.158)
these tools I go to Project raccoon then (start: 2357.879, duration: 5.039)
uhoh they&#39;re on a different version (start: 2361.118, duration: 3.321)
they&#39;re let&#39;s say using Python and not (start: 2362.919, duration: 2.720)
Pearl then someone else is going to (start: 2364.439, duration: 3.079)
using a different set of tools how do I (start: 2365.639, duration: 3.198)
make sure those things don&#39;t conflict I (start: 2367.520, duration: 3.160)
need to be able to Hopscotch between (start: 2368.839, duration: 5.440)
these projects right without fear and we (start: 2370.679, duration: 7.399)
get this right um this convergence of CI (start: 2374.280, duration: 6.400)
prod and and development run the same (start: 2378.079, duration: 4.841)
bits everywhere at least if you can (start: 2380.679, duration: 4.519)
right that that&#39;s the best chance of (start: 2382.919, duration: 4.919)
success to be able to to uh recreate the (start: 2385.199, duration: 6.039)
the same scenarios in the same (start: 2387.839, duration: 3.401)
situations (start: 2395.399, duration: 4.039)
so we talked about uh going into (start: 2397.479, duration: 3.079)
projects being able to get all the (start: 2399.439, duration: 4.599)
things that you need um hey these uh (start: 2400.560, duration: 5.079)
containers that we&#39;re making they&#39;re (start: 2404.040, duration: 3.640)
just normal containers right you can (start: 2405.639, duration: 4.400)
inspect them you can look at them uh but (start: 2407.679, duration: 3.839)
they have this property where the layers (start: 2410.040, duration: 3.799)
are non-conflicting right now we&#39;re not (start: 2411.520, duration: 3.880)
really leveraging that property to the (start: 2413.839, duration: 3.641)
full extent and that goes into a little (start: 2415.399, duration: 4.400)
bit of like well what we want to do next (start: 2417.479, duration: 5.280)
right so our call to action here is (start: 2419.800, duration: 5.360)
first off consider using the shim (start: 2422.760, duration: 4.639)
consider using some of these tools like (start: 2425.159, duration: 3.799)
Docker and Nyx can work together very (start: 2427.399, duration: 3.599)
well who should do this hey if you care (start: 2428.959, duration: 4.000)
about containers anyone interested in (start: 2431.000, duration: 3.559)
some of these superpowers you might have (start: 2432.959, duration: 4.039)
access to take a look at this and take a (start: 2434.560, duration: 4.360)
look at this now right we have examples (start: 2437.000, duration: 3.759)
that you can draw on come talk to us (start: 2438.919, duration: 4.320)
afterwards I mean what what I what what (start: 2440.760, duration: 4.559)
I find is that most of you will probably (start: 2443.239, duration: 4.760)
come to Nyx because you&#39;re trying to (start: 2445.319, duration: 4.280)
reproduce development environments or (start: 2448.000, duration: 3.680)
you&#39;re trying to like change the way you (start: 2449.599, duration: 3.401)
build up your own development (start: 2451.679, duration: 4.280)
environment but once you have done that (start: 2453.000, duration: 4.199)
I we just just want to kind of impress (start: 2455.959, duration: 3.158)
and sort of demystify the process of (start: 2457.199, duration: 4.480)
like that content you can also use to (start: 2459.118, duration: 4.841)
build your your images as well that&#39;s I (start: 2461.679, duration: 4.678)
think that&#39;s the key here like don&#39;t (start: 2463.959, duration: 4.879)
don&#39;t think that you that you&#39;ve just (start: 2466.358, duration: 5.321)
built a big difficulty for yourself in (start: 2468.839, duration: 5.681)
putting this stuff into into images and (start: 2471.679, duration: 6.000)
um and and using your CI processes there (start: 2474.520, duration: 6.440)
is there is like a very clear path to (start: 2477.679, duration: 4.638)
using Nicks for your development (start: 2480.959, duration: 3.599)
environments and for your projects and (start: 2482.319, duration: 5.640)
also then moving in using um using it (start: 2484.560, duration: 4.798)
for your CI and and production (start: 2487.959, duration: 3.118)
environments as (start: 2489.358, duration: 4.681)
well next up um we want better (start: 2491.079, duration: 5.640)
integration between build kit and NEX so (start: 2494.040, duration: 4.039)
help us figure out exactly what that (start: 2496.719, duration: 3.118)
integration needs to be how do we kind (start: 2498.079, duration: 3.121)
of Upstream these things how do we (start: 2499.839, duration: 4.201)
expose this to people um and this we (start: 2501.199, duration: 4.719)
need some of the developers some of the (start: 2504.040, duration: 3.078)
people in this room some of the people (start: 2505.919, duration: 2.759)
listening we need to come together and (start: 2507.118, duration: 3.401)
figure out like how do we do this well (start: 2508.679, duration: 4.840)
what creates a good user experience and (start: 2510.520, duration: 5.119)
uh so again like raise issues in the in (start: 2513.520, duration: 3.920)
the build kit proc project come contact (start: 2515.639, duration: 3.678)
us uh I think there are some exciting (start: 2517.439, duration: 4.638)
possibilities that uh we can start to uh (start: 2519.319, duration: 6.039)
take take advantage of awesome and we (start: 2522.079, duration: 5.160)
really have been experimenting with with (start: 2525.358, duration: 3.801)
some of these run times too and it&#39;s (start: 2527.239, duration: 5.239)
it&#39;s kind of wild to see your ability to (start: 2529.159, duration: 5.559)
spin up run times in say like a custom (start: 2532.479, duration: 4.199)
container D environment that we are that (start: 2534.719, duration: 3.598)
we&#39;re playing around with and and really (start: 2536.679, duration: 5.119)
see that suddenly we&#39;ve got a few new (start: 2538.319, duration: 7.921)
options and I mean it&#39;s not the like my (start: 2541.800, duration: 7.278)
appreciation of this is has has been (start: 2546.239, duration: 4.480)
kind of like a slow Evolution I (start: 2549.079, duration: 3.680)
definitely started with like I love what (start: 2550.719, duration: 4.239)
this does to my Dev environments but now (start: 2552.760, duration: 4.199)
I&#39;m also starting to go hi there there (start: 2554.959, duration: 3.398)
are there are some really interesting (start: 2556.959, duration: 2.878)
properties to this that are improving my (start: 2558.358, duration: 4.560)
runtime as well and I I just know so (start: 2559.839, duration: 4.921)
much more about what has gone into my (start: 2562.919, duration: 4.320)
image yeah and then some of these issues (start: 2564.760, duration: 3.960)
like some of these performance benefits (start: 2567.239, duration: 3.279)
some of the scaling benefits and storage (start: 2568.719, duration: 3.680)
benefits really come into play once you (start: 2570.520, duration: 3.598)
start getting to Big Enterprises right (start: 2572.399, duration: 3.240)
if it&#39;s a you know if it&#39;s just you (start: 2574.118, duration: 3.520)
alone and you get a 5% storage saving (start: 2575.639, duration: 3.759)
might be not a big deal even a 50% you (start: 2577.639, duration: 4.198)
might not care but once you get to like (start: 2579.399, duration: 4.198)
very large scale where those costs (start: 2581.839, duration: 3.000)
involved to those things start to (start: 2583.599, duration: 4.361)
actually add up now you really do care (start: 2584.839, duration: 4.921)
so this is what we see is the next kind (start: 2587.959, duration: 3.598)
of big step this is a bit more longer (start: 2589.760, duration: 3.680)
term is we want to set up like a working (start: 2591.559, duration: 3.200)
group of people who care about this who (start: 2593.439, duration: 3.678)
want to make this change happen and (start: 2594.760, duration: 4.039)
let&#39;s like figure out how to incorporate (start: 2597.118, duration: 3.760)
these ideas into the standards into the (start: 2598.800, duration: 4.119)
like core uh libraries that are on the (start: 2600.879, duration: 3.880)
ecosystem so that if you get them in the (start: 2602.919, duration: 4.079)
core libraries this will per at out into (start: 2604.760, duration: 3.960)
all the various other providers and (start: 2607.000, duration: 3.358)
tools that everyone else is building (start: 2608.719, duration: 3.680)
upon and once they&#39;re there you start to (start: 2610.358, duration: 3.960)
be able to get these benefits uh for (start: 2612.399, duration: 5.039)
free so uh flx is trying to kind of (start: 2614.319, duration: 5.201)
create this working group again reach (start: 2617.439, duration: 3.759)
out to us because I think this is really (start: 2619.520, duration: 3.200)
exciting there&#39;s a lot of really cool (start: 2621.199, duration: 4.399)
possibilities Let&#39;s uh figure it out um (start: 2622.719, duration: 5.039)
we see have proof of Concepts right we (start: 2625.599, duration: 4.321)
have uh PDT started working on this this (start: 2627.760, duration: 3.759)
is was done in Docker as well we have (start: 2629.919, duration: 3.158)
experiments we&#39;re seeing all over the (start: 2631.520, duration: 3.720)
place of people playing with this idea (start: 2633.079, duration: 4.080)
let&#39;s take these proof of concept and (start: 2635.239, duration: 4.159)
actually incorporate them and kind of (start: 2637.159, duration: 4.678)
take it to that next next level that&#39;s (start: 2639.399, duration: 3.480)
the uh (start: 2641.839, duration: 3.081)
hope yeah I mean that&#39;s that&#39;s why (start: 2642.879, duration: 4.320)
Docker Docker Labs is interested in this (start: 2644.919, duration: 4.399)
and um yeah I just want to I just want (start: 2647.199, duration: 3.680)
to thank you Tom for bringing your (start: 2649.319, duration: 4.361)
expertise to this and uh you know we&#39;ve (start: 2650.879, duration: 3.920)
we&#39;ve got one of the core indx (start: 2653.679, duration: 3.359)
developers here so you know any anyone (start: 2654.800, duration: 4.039)
who&#39;s got got questions about this I (start: 2657.040, duration: 3.880)
think uh probably now&#39;s a good time (start: 2658.839, duration: 5.640)
right yeah um I&#39;ll do a little bit of a (start: 2660.919, duration: 5.678)
a pitch here um and this is what FL is (start: 2664.479, duration: 3.920)
doing right we&#39;re trying to bring these (start: 2666.599, duration: 3.440)
superpowers of Nyx bring it to work (start: 2668.399, duration: 3.918)
bring it to Enterprise leverage it right (start: 2670.040, duration: 3.599)
build these Integrations right if you (start: 2672.319, duration: 3.000)
don&#39;t integrate with other things then (start: 2673.639, duration: 3.400)
you&#39;re kind of all alone we want to (start: 2675.319, duration: 3.121)
increase our integration with the rest (start: 2677.040, duration: 4.039)
of the ecosystem so that uh it becomes (start: 2678.439, duration: 4.840)
far more viable far more useful and in (start: 2681.079, duration: 3.881)
the end uh far more (start: 2683.280, duration: 5.400)
productive so to wrap it up uh try (start: 2684.959, duration: 6.118)
Docker and Nix working together help us (start: 2688.679, duration: 4.678)
improve this integration and uh join a (start: 2691.079, duration: 3.881)
working (start: 2693.358, duration: 5.040)
group thank (start: 2694.959, duration: 3.440)
you all right we got 15 seconds for time (start: 2702.079, duration: 4.681)
for (start: 2704.479, duration: 2.279)
questions uh I have a quick question so (start: 2710.559, duration: 6.559)
I saw that for for Docker you kind of (start: 2713.239, duration: 6.800)
just uh decoupled the Bild process and (start: 2717.118, duration: 4.921)
you made all of these uh packages (start: 2720.040, duration: 4.719)
isolated is there a way where you can (start: 2722.040, duration: 4.078)
actually build all these packages just (start: 2724.760, duration: 3.720)
concurrently so that the build time is (start: 2726.118, duration: 4.881)
much smaller than what it used to be the (start: 2728.479, duration: 4.760)
the overall build time yeah yeah so I (start: 2731.000, duration: 5.318)
mean like like the in some senses like (start: 2733.239, duration: 5.679)
the build kit is an orchestrator right (start: 2736.319, duration: 5.800)
so why doesn&#39;t it take advantage of (start: 2738.919, duration: 5.880)
parallelization yes yeah yeah I mean (start: 2742.118, duration: 4.080)
that I think that is one of the things (start: 2744.800, duration: 3.240)
that we that we would like to address (start: 2746.199, duration: 3.960)
with this because we have we&#39;ve got the (start: 2748.040, duration: 6.000)
pieces we need now to do a uh like every (start: 2750.159, duration: 6.599)
time we say the NY is insanely cashable (start: 2754.040, duration: 4.599)
NY is also insanely (start: 2756.760, duration: 5.719)
parallelizable and uh and so yes I I I I (start: 2758.639, duration: 5.400)
think I think that&#39;s one of that that&#39;s (start: 2762.479, duration: 2.960)
one of the things where we we see build (start: 2764.040, duration: 3.279)
kit NX Integrations as being potentially (start: 2765.439, duration: 5.000)
really powerful yeah we we calculate (start: 2767.319, duration: 4.960)
that that graph ahead of time and (start: 2770.439, duration: 3.200)
because you know what it is ahead of (start: 2772.280, duration: 2.720)
time you could start to do a lot of (start: 2773.639, duration: 3.959)
parallel uh work yeah that&#39;s helpful I (start: 2775.000, duration: 5.039)
mean it&#39;s late it&#39;s it&#39;s weird it&#39;s lazy (start: 2777.599, duration: 4.080)
like you know where the outputs are (start: 2780.040, duration: 3.519)
going to be before like you get you can (start: 2781.679, duration: 3.599)
start depending on the outputs of things (start: 2783.559, duration: 4.080)
before they exist is that weird I think (start: 2785.280, duration: 4.559)
that&#39;s (start: 2787.639, duration: 2.198)
weird yeah so my phone died so it&#39;s (start: 2790.679, duration: 4.678)
entirely possible that I I I can I can (start: 2793.159, duration: 3.759)
Intuit it from the bitly URL you had at (start: 2795.358, duration: 2.801)
the end there that this is probably (start: 2796.919, duration: 2.799)
exactly what you did or what has been (start: 2798.159, duration: 3.438)
done but given the insane cacheability (start: 2799.719, duration: 3.960)
that has me been mentioned as well as (start: 2801.599, duration: 3.200)
the fact that you have non-overlapping (start: 2803.679, duration: 3.119)
layers my immediate thought as somebody (start: 2804.800, duration: 3.400)
who works on container run times is we (start: 2806.800, duration: 2.640)
can dispense entirely with the layer (start: 2808.199, duration: 3.680)
blobs right so if you don&#39;t if you have (start: 2809.439, duration: 5.039)
a uh a image manifest which is defined (start: 2811.879, duration: 4.519)
entirely in terms of (start: 2814.479, duration: 4.638)
cash Nix content instead of layer blobs (start: 2816.399, duration: 3.839)
you don&#39;t even need those in the (start: 2819.118, duration: 3.200)
registry you can have a snap shotter or (start: 2820.239, duration: 3.598)
some runtime implementation which (start: 2822.319, duration: 3.759)
natively understands those and populates (start: 2823.839, duration: 4.600)
the rudest that defines the container (start: 2826.079, duration: 4.361)
entirely from the Nick store one of the (start: 2828.439, duration: 3.678)
example one of the experiments that&#39;s (start: 2830.439, duration: 4.360)
out there right now is called snapshot (start: 2832.118, duration: 5.040)
well and I I saw that being saw in the (start: 2834.800, duration: 4.639)
working group slide which I assume is uh (start: 2837.159, duration: 3.319)
like I said I wasn&#39;t able to get my (start: 2839.439, duration: 2.398)
phone up but yeah that Nick snapshotted (start: 2840.479, duration: 3.118)
I assume that&#39;s probably a containerd (start: 2841.839, duration: 4.120)
snapshot which natively understands (start: 2843.599, duration: 4.640)
Nick&#39;s layers yeah yeah that&#39;s right (start: 2845.959, duration: 4.519)
you&#39;ve you&#39;ve you have intuited that (start: 2848.239, duration: 4.519)
correctly yeah that no I was going to be (start: 2850.479, duration: 3.799)
uh at the end here was going to go so (start: 2852.760, duration: 3.519)
why don&#39;t you do this but I yeah that (start: 2854.280, duration: 3.078)
that&#39;s what I figured is that somebody (start: 2856.280, duration: 3.078)
had tried that so yeah yeah let&#39;s take (start: 2857.358, duration: 3.841)
this idea and then start to incorporate (start: 2859.358, duration: 3.161)
it right let&#39;s to make it so that you (start: 2861.199, duration: 3.079)
don&#39;t have to go out of your way and be (start: 2862.520, duration: 4.119)
an expert to Le and benefit from this (start: 2864.280, duration: 4.078)
let&#39;s incorporate this kind of more (start: 2866.639, duration: 3.719)
tightly into the standards into the run (start: 2868.358, duration: 5.239)
times so you start to get it for (start: 2870.358, duration: 3.240)
free (start: 2874.719, duration: 3.000)
thanks everyone okay thank you very (start: 2878.639, duration: 4.260)
[Applause] (start: 2880.409, duration: 5.778)
[Music] (start: 2882.899, duration: 3.289)
much (start: 2887.479, duration: 3.000)
